from glob import glob
import os
from pathlib import Path
import re
import shutil

import pandas as pd
from snakemake.utils import min_version

min_version("7.0")

configfile: "config/config.yaml"

os.makedirs("snakemake_tmp", exist_ok=True)

#### Parse sample table ########################################################
sampletsv = pd.read_csv(config['sampletsv'], sep="\t", index_col=[0])
sampletsv.index = sampletsv.index.astype(str)
sampletsv.loc[sampletsv['R0'].isnull(), 'R0'] = "NA"
sampletsv.loc[sampletsv['nonUDG_R0'].isnull(), 'nonUDG_R0'] = "NA"
SAMPLES = sampletsv.index.tolist()
################################################################################

#### Include sub-workflows #####################################################

include: "rules/assembly.smk"
include: "rules/alignment.smk"
include: "rules/consensus_correction.smk"
include: "rules/rename_sort_contigs.smk"
include: "rules/finalise_alignments.smk"
include: "rules/quality_summary.smk"
include: "rules/prokka.smk"
include: "rules/pydamage.smk"
include: "rules/binning.smk"
include: "rules/refinement.smk"
include: "rules/quality_evaluation.smk"
include: "rules/taxonomic_profiling.smk"

################################################################################

#### Expected files ############################################################

def expected_taxprofilers():
    taxprofilers = []
    if config['taxonomic_profiling']:
        if 'gtdbtk' in config['taxprofilers']:
            taxprofilers.append(f"{config['resultdir']}/stats/gtdbtk/gtdbtk.bac120.summary.tsv")
        if 'phylophlan3' in config['taxprofilers']:
            taxprofilers.append(f"{config['resultdir']}/stats/phylophlan3/phylophlan3_mash.tsv")
    return taxprofilers

################################################################################

wildcard_constraints:
    assembler = "(megahit|metaspades)",
    sample = config['wildcard_constraint_samples']

localrules: validate_sampletsv

rule all:
	input:
		f"{config['resultdir']}/summary_{config['projname']}.tsv",
        f"{config['resultdir']}/stats/{config['projname']}_taxprofilers.done",
        # TODO: summarise all bins for a project
        expand("{resultdir}/binning/{sample}-{assembler}_refinement.done", resultdir=[config['resultdir']], sample=SAMPLES, assembler=[config['assembler']]),
        expand("{resultdir}/stats/bin_quality/{sample}-{assembler}_binqualities.tsv", resultdir=[config['resultdir']], sample=SAMPLES, assembler=[config['assembler']]),
        

rule validate_sampletsv:
    output:
        touch("{tmpdir}/sampletsv.validated")
    message: "Validate the correctness of the input table"
    params:
        sampletsv = lambda wildcards: config['sampletsv'],
        assembler = lambda wildcards: config['assembler'],
        readcorrection = lambda wildcards: config['readcorrection']
    script:
        "scripts/validate_sampletsv.py"

rule summary:
    input:
        consensus_correction = expand("{resultdir}/consensus_correction/{assembler}/{sample}_contigs.fasta.gz", resultdir=[config['resultdir']], assembler=[config['assembler']], sample=SAMPLES),
        dedup = expand("{resultdir}/alignment/{assembler}/{sample}.sorted.dedup.bam.bai", resultdir=[config['resultdir']], assembler=[config['assembler']], sample=SAMPLES),
        caln50 = expand("{resultdir}/stats/caln50/{sample}-{assembler}.caln", resultdir=[config['resultdir']], assembler=[config['assembler']], sample=SAMPLES),
        metaquast = expand("{resultdir}/stats/metaquast/{sample}-{assembler}/report.html", resultdir=[config['resultdir']], assembler=[config['assembler']], sample=SAMPLES),
        prokka = expand("{resultdir}/prokka/{sample}-{assembler}.gff.gz", resultdir=[config['resultdir']], assembler=[config['assembler']], sample=SAMPLES),
        pydamage = expand("{resultdir}/pydamage/{sample}-{assembler}.pydamage.csv.gz", resultdir=[config['resultdir']], assembler=[config['assembler']], sample=SAMPLES)
    output:
        "{resultdir}/summary_{projname}.tsv"
    message: "Create a summary file of the assembly process"
    params:
        samples = SAMPLES,
        assembler = config['assembler'],
        caln50_dir = "{resultdir}/stats/caln50",
        flagstat_dir = "{resultdir}/stats/flagstat",
        metaquast_dir = "{resultdir}/stats/metaquast",
        prokka_dir = "{resultdir}/prokka",
        pydamage = lambda wildcards: config['pydamage'],
        pydamage_dir = "{resultdir}/pydamage"
    script:
        "scripts/summary.py"

rule rename_taxprofilers:
    input:
        expected_taxprofilers()
    output:
        f"{config['resultdir']}/stats/{config['projname']}_taxprofilers.done"
    message: "Add project name to taxprofiler names"
    run:
        if len(input) > 0:
            if 'gtdbtk' in config['taxprofilers']:
                if os.path.islink(f"{config['resultdir']}/stats/gtdbtk/gtdbtk.bac120.summary.tsv"):
                    shutil.copy2(f"{config['resultdir']}/stats/gtdbtk/gtdbtk.bac120.summary.tsv",
                                 f"{config['resultdir']}/stats/gtdbtk/gtdbtk.{config['projname']}_bac120.summary.tsv") 
                if os.path.islink(f"{config['resultdir']}/stats/gtdbtk/gtdbtk.ar53.summary.tsv"):
                    shutil.copy2(f"{config['resultdir']}/stats/gtdbtk/gtdbtk.ar53.summary.tsv",
                                 f"{config['resultdir']}/stats/gtdbtk/gtdbtk.{config['projname']}_ar53.summary.tsv") 
            # TODO: add PhyloPhlAn3
        Path(output[0]).touch()
